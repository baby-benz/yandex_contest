package ru.yandex.contest.balanced_parentheses;

import java.util.Scanner;

/*
Рекурсивный вариант решения задачи:
    1) 3 переменные:
        а) Счетчик открывающих скобок
        б) Длина скобочной последовательности, которую нужно сгенерировать
        в) Позиция, на которую необходимо поставить скобку
    2) Пока мы не дошли до середины последовательности, будем вставлять на текущую позицию открывающую скобку и вызывать
       функцию еще раз, увеличивая счетчик открывающих скобок и сдвигая позицию. Таким образом, мы будем двигаться от
       лексикографически больших вариантов (где в начале последовательности наибольшее количество открывающих скобок) к
       лексикографически меньшим вариантам (где открывающие скобки постоянно сменяются закрывающими)
    3) Затем вставляем закрывающие скобки и вызываем рекурсивно функцию снова, уменьшая счетчик открывающих скобок, то
       есть закрывая открытые скобки в последовательности. Так мы делаем до тех пор, пока счетчик открывающих скобок
       не станет равен 0 и мы не закроем все открывающие скобки
    4) Как только индекс текущей позиции становится равен длине необходимой скобочной последовательности, мы можем
       выводить полученную скобочную последовательность, т.к. сгенерировали ее полностью

    Сложность алгоритма - O((2*n)!/((n + 1)! * n!) * n), где n - длина последовательности,
                                                             (2*n)!/((n + 1)! * n!) - число Каталана
                                                                                      (см. https://en.wikipedia.org/wiki/Catalan_number)
*/

public class Main {
    static char[] result;

    static void gen(int openBracketsCnt, int bracketCnt, int idx) {
        if (openBracketsCnt <= bracketCnt - idx - 2) {
            result[idx] = '(';
            gen(openBracketsCnt + 1, bracketCnt, idx + 1);
        }
        if (openBracketsCnt > 0) {
            result[idx] = ')';
            gen(openBracketsCnt - 1, bracketCnt, idx + 1);
        }
        if (idx == bracketCnt) {
            System.out.println(new String(result));
        }
    }


    public static void main(String[] args) {
        try (Scanner sc = new Scanner(System.in)) {
            int bracketCnt = sc.nextInt() * 2;

            result = new char[bracketCnt];

            gen(0, bracketCnt, 0);
        }
    }
}
